#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Service name
SERVICE_NAME="com.nodecontroller.daemon"
DAEMON_PATH="/Library/LaunchDaemons/${SERVICE_NAME}.plist"
CONFIG_PATH="/Library/NodeController/config/config.json"

# Function to check if running as root
check_root() {
    if [ "$EUID" -ne 0 ]; then 
        echo -e "${RED}Please run with sudo${NC}"
        exit 1
    fi
}

# Function to get service status
get_status() {
    if launchctl list | grep -q "${SERVICE_NAME}"; then
        echo -e "${GREEN}Node Monitor is running${NC}"
        echo "Recent logs:"
        tail -n 5 /Library/Logs/NodeController/output.log
        
        # Show system stats
        echo -e "\nSystem Stats:"
        top -l 1 | head -n 10
    else
        echo -e "${RED}Node Monitor is not running${NC}"
    fi
}

# Function to start service
start_service() {
    check_root
    echo "Starting Node Monitor..."
    if launchctl load "${DAEMON_PATH}"; then
        echo -e "${GREEN}Node Monitor started successfully${NC}"
    else
        echo -e "${RED}Failed to start Node Monitor${NC}"
        exit 1
    fi
}

# Function to stop service
stop_service() {
    check_root
    echo "Stopping Node Monitor..."
    if launchctl unload "${DAEMON_PATH}"; then
        echo -e "${GREEN}Node Monitor stopped successfully${NC}"
    else
        echo -e "${RED}Failed to stop Node Monitor${NC}"
        exit 1
    fi
}

# Function to restart service
restart_service() {
    check_root
    echo "Restarting Node Monitor..."
    stop_service
    sleep 2
    start_service
}

# Function to show logs
show_logs() {
    local lines=${1:-50}
    if [ -f "/Library/Logs/NodeController/output.log" ]; then
        echo "Last ${lines} lines of output log:"
        tail -n "${lines}" /Library/Logs/NodeController/output.log
    fi
    if [ -f "/Library/Logs/NodeController/error.log" ]; then
        echo -e "\nLast ${lines} lines of error log:"
        tail -n "${lines}" /Library/Logs/NodeController/error.log
    fi
}

# Function to show configuration
show_config() {
    if [ -f "${CONFIG_PATH}" ]; then
        echo "Current configuration:"
        cat "${CONFIG_PATH}" | grep -v "installation_date" | grep -v "installation_version"
    else
        echo -e "${RED}Configuration file not found${NC}"
    fi
}

# Function to edit configuration
edit_config() {
    check_root
    if [ -f "${CONFIG_PATH}" ]; then
        echo "Opening configuration file in editor..."
        ${EDITOR:-vi} "${CONFIG_PATH}"
        echo "Configuration updated. Restart service to apply changes."
        echo "Run: sudo node-monitor restart"
    else
        echo -e "${RED}Configuration file not found${NC}"
    fi
}

# Function to show help
show_help() {
    echo "Node Monitor Control Script"
    echo "Usage: node-monitor [command]"
    echo ""
    echo "Commands:"
    echo "  start     Start the node monitor service"
    echo "  stop      Stop the node monitor service"
    echo "  restart   Restart the node monitor service"
    echo "  status    Show the current status"
    echo "  logs      Show the last 50 lines of logs"
    echo "  logs N    Show the last N lines of logs"
    echo "  config    Show the current configuration"
    echo "  edit      Edit the configuration file"
    echo "  help      Show this help message"
}

# Main command processing
case "$1" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        restart_service
        ;;
    status)
        get_status
        ;;
    logs)
        show_logs "${2:-50}"
        ;;
    config)
        show_config
        ;;
    edit)
        edit_config
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${YELLOW}Unknown command: $1${NC}"
        show_help
        exit 1
        ;;
esac 